

Redux의 미들웨어인 thunk와 Saga

   리덕스는 동기적 홈으로 통해 동작

   액션 생성 -> 디스패치 -> store에 전달
   -> 리듀서는 정해진 로직에 의해 액션을 처리
   -> 상태값을 변환

   하지만, 리덕스에서는 동기적인 흐름만으로는 처리하기 힘든 작업들이 존재한다

   대표적으로 시간을 딜레이 시켜 동작, 외부에서 데이터를 요청하여
   그에 따른 응답을 보여주는 경우

액션 생성 -> 디스패치 -> store에 전달 
-> 리듀서는 정해진 로직에 의해 액션을 처리(* 처리하는 시간)
-> 바뀐 상태값을 반환 -> 그 다음 로직

------------------------------------------------------------------------------
동기
   :요청을 보낸 후 결과물을 받아야만 다음 동작이 이루어지는 방식
비동기
   : 요청을 보낸 후 결과물을 받지 않아도 다음 동작이 이루어지는 방식

자바스크립트 싱글스레드 = 한 번에 하나의 로직

---------------------------------------------------------------------------------
Thunk
   : redux-thunk는 리덕스 미들웨어에서 비동기 작업을 처리하는
    가장 대표적인 미들웨어 중 하나
   : thunk는 딜레이(시간이 걸리는 행위)를 구현을 직접 해야 한다.
   : then 함수로 인하여 로직 자체가 분리가 되지 않아 코드가 더러워질 수 있다
Saga
   : redux-Saga 또한 비동기 작업을 동기적으로 처리하기 위한 미들웨어라는 점은
    thunk와 다르지 않지만 제너레이터 사용을 통해 딜레이 실행을 순차적으로 구현할 수 있으며
    로직 처리 코드를 따로 분리
   : 단, 함수 및 state 상태가 많이 추가되어 코드가 길어진다는 단점이 있다

---------------------------------------------------------------------------------
Redux 설치 라이브러리

npm i redux react-redux redux-saga
npm i -D redux-logger redux-devtools-extension (개발용 development)

----------------------------------------------------------------------------------
* 라이브러리들 적용하다 보면 리액트 18v로 올해 1분기
   라이브러리 설치 자체를 지원하지 않는 경우가 존재
   
   특유 에러가 존재, 무작정 안되면 (에러 검색해보고 할 것)

   npm i 패키지명 --force [강제]
      : 다른 의존 버전들을 함께 설치
   npm i 패키지명 --legacy-peer-deps [무시]
      : 버전이 맞지 않아도 일단 설치

   --force -> 안되면 --legacy를 이용

   18버전에 맞게 알파버전을 만든 라이브러리 다수 존재
   알파버전 설치가 더 좋다

-------------------------------------------------------------
폴더 3가지
   store
      - 리덕스 설정 파일
   reducer
      - 전역 상태와, 전역 상태를 바꿔주는 로직
   saga
      - 리덕스에서 비동기처리를 동기적으로 바꿔주는 로직

-------------------------------------------------------------

npm i @faker-js/faker immer

   - reducer의 전역 상태의 불변성을 지켜주는 immer를 사용
   - 백엔드 없이 더미데이터를 만들어서 마치 백엔드에게 데이터를 받아온 것처럼
      만들기 위한 @faker-js/faker

-----------------------------------------------------------------
redux Saga의 함수

   yield
      Saga함수는 아니지만, 제너레이터 함수로 saga에서 동기적 흐름을 
      진행할 수 있도록 도와주는 명령어

   takeLatest
      가장 보편적으로 사용, 진행중이던 작업 취소, 가장 마지막 실행된 작업 실행

   etc) takeEvery(전체)
      
   delay
      지연 처리 효과를(1000 = 1초) 줄 수 있으며 보통은 더미데이터를 이용해서
      작업할 때 백엔드의 비동기 통신을 흉내내기 위해 사용.

   put
      특정 액션을 dispatch하여 다시 reducer로 action을 통해 타입과 데이터를 보냄

   call
      함수를 실행, 첫 번째 파라미터에는 함수, 두 번째에는 인수
      ex) const response = yield call(로그인로직(백엔드 주소를 실행시키는 함수명), 로그인데이터(id, pw))

   fork
      함수의 비동기적인 호출을 할 때 사용, call과 달리 순서 상관없이 실행할 때 사용
      보통은 이벤트 리스너 함수를 실행할 때 사용

   all
      보통 fork와 함께 사용, 배열 안의 fork를 병렬적으로 모두 실행
      그리고 해당 fork가 모두 실행될 때까지 기다리는 역할   

