ReactJS란?
   - 복잡한 사용자 인터페이스(UI)를 쉽게 구축하기 위해 페이스북에서 만든
   JS 라이브러리

React의 핵심 컨셉
   - re-render와 components

components
   - 한 가지의 기능을 수행하는 UI 단위

re-render
   - 업데이트 이전의 가상 돔트리와 업데이트 이후 가상 돔 트리 상태를 비교
      업데이트 된 내용이 있다면 그 때 Dom Tree를 업데이트 하고 render 함수를
      다시 호출하는 과정

Virtual DOM
   - React가 가지고 있는 가상 돔 트리, 진짜 돔 트리의 복사본

-------------------------------------------------------------------------

CRA (create-react-app)
   - React에서 다로 설치하지 않아도 필요한 라이브러리들은 자동으로
      설치해주고 폴더 구조도 자동으로 만들어주는 일종의 명령어

   - 최고의 장점은 설정하기 까다로운 바벨과 웹팩을 초기 패키지에 포함

-------------------------------------------------------------------------

바벨 (babel)
   - 트랜스파일러 (번역기)
   - ES6 이상의 문법 코드들을 지원하지 않는 브라우저가 이해할 수
      있도록 ES5 이하의 문법으로 변환
   
   => 최신 버전이 지원 되지 않는 브라우저에 맞는 버전의 언어로 변환

-------------------------------------------------------------------------

웹팩
   - 가장 많이 사용되는 *모듈 번들러
   - 애플리케이션을 구성하는 자원 (html, css, js, img, audio ...) 등을
      모두 각각의 모듈로 보고 이를 종합해서 하나의 결과물을 만드는 도구

*모듈
   - 프로그래밍 관점에서 특정 기능을 갖는 작은 코드 단위(코드 집합)

-------------------------------------------------------------------------

todolist
   - ReactJS 입문자가 하기에 가장 유명한 미니 프로젝트 (토이 프로젝트)

-------------------------------------------------------------------------

React의 기본 주소와 포트

localhost:3000

localhost = 자신의 IP 주소 = 127.0.0.1:3000;
localhost:3000

-------------------------------------------------------------------------

npm i
   node_modules가 없는 상태로 전달
   git에 있는 것을 clone으로 받아도 마찬가지의 형태

*package.json
   dependencies
   : 설치되어 있는 라이브러리들의 키 값
   : node_modules 폴더에 라이브러리들이 설치되어 있는데
      해당 폴더는 용량이 크기 때문에 공유X
   : 따라서 npm i / npm install 이라는 명령어를 치게 되면
      package.json의 dependencies에 명시되어 있는 라이브러리들을
      알아서 설치 (node_modules 폴더가 생성)

script
   start = 사용자가 보는 화면을 개발자가 확인할 때
   build = 배포 폴더를 만들기 위하여 사용
   dev = 개발자가 보는 화면을 개발자가 확인할 때
   eject = 숨겨진 폴더 확인 (웹팩, 바벨 커스텀)
   test = TDD (테스트 주도 개발) --- 유닛테스트 --- "jest"

port 변경하기
   SET PORT=3001 && ...   

-------------------------------------------------------------------------

CSS-in-JS
   style.css와 같은 css파일을 만들어서 css를 적용
   js안에서 css문법을 사용하고 적용시킬 수 있는게 css-in-js

   => Styled-components, Emotion

왜?
   React와 같은 SPA에 개발에서 js안에서 html, js를 모두 기술
   따라서 문서의 구조와 로직에 스타일링 코드가 같은 위치에 위치시킬 수 있음
   => 응집도를 높일 수 있음
   => 굳이 다른 파일을 가지고 오거나 옮겨다니지 않아도 
      개발하고 있는 그 컴포넌트 자체에 집중할 수 있게 (부하를 감소)

-------------------------------------------------------------------------

Styled-components
   - React의 css 스타일링 방법 중 하나
   - css 파일이 아닌 js 파일에 직접 기술하는 css in js의 한 종류
   - 컴포넌트 호출 시 필요한 css만 호출
   - className을 사용하지 않아 겹치는 오류 방지

사용법 ex)
   <LoginForm>
   ...
   <LoginForm/>

   const LoginForm = styled.div`
      ...css 속성
   `

   라이브러리 설치
   npm i styled-components
   (해당 프로젝트 경로에 .../todolist)

-------------------------------------------------------------------------

그 외의 방법

SASS > SCSS
   - css의 상위 버전 문법
   - 복잡한 작업을 쉽게 해주고, 코드의 재활용성을 높여줌
   - css 내에서 변수 사용이 가능 - 확장성이 높음
   - 코드의 가독성을 높여주고 유지보수를 쉽게 해준다

Emotion
   - styled-components와 대체될 유망주, 그러나 styled-components와
      사용법이 똑같다
   - emotion 만의 문법 + styled-components보다 아주 약간 가볍다
   - 하지만, 아직 시장에선 압도적으로 styled-components를 주로 사용

사용법
   const LoginForm = css`
      ...css 속성
   `
   + styled처럼도 사용할 수 있음

-------------------------------------------------------------------------

* 대체
   1. 라이브러리에 대한 의존성이 높기 때문에 내가 기존에 알던 사용법이
      새로운 프로젝트에서는 적용이 안되는 경우가 허다함
      (* 라이브러리를 사용할 때 해당 사이트 getStarted(guide)를 읽어보는
      습관을 들일 것)
   2. 단, 완전히 대체되는 경우가 존재.
      ex) 변수를 전역으로 관리할 수 있는 라이브러리(redux)
      contextAPI/useReducer -> redux -> mobx -> recoil/React.Query 로 대체

      => 원리가 똑같기 때문에 상위호환

-------------------------------------------------------------------------

hook 함수
react-router-dom
react 공식 홈페이지
https://reactjs.org/docs/hooks-overview.html

-------------------------------------------------------------------------

* import
   참조, 불러오는 것
   ex) 설치한 라이브러리, 모듈, 함수, 변수, 객체...

* import
   내보내는 것
   import 할 수 있게 밖으로 내보내야 한다

-------------------------------------------------------------------------



-------------------------------------------------------------------------

map, find, filter
삼항연산자, 조건부 렌더링



