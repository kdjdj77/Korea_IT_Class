ReactJS

---------------------------------------------------------

NodeJS
   크롬의 v8엔진 (Javascript를 웹브라우저에서 실행알 수 있도록 하는 엔진)
   웹 브라우저 밖에서도 사용할 수 있도록 한 일종의 런타임(실행 환경)

설치
   https://nodejs.org/ko/
---------------------------------------------------------

npm WARN config global `--global`, `--local` are deprecated.
Use `--location=global` instead.
해결법

-powershell - 관리자권한
Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
npm install --global --production npm-windows-upgrade
npm-windows-upgrade

---------------------------------------------------------

* ReactJS란?
   복잡한 사용자 인터페이스(UI)를 쉽게 구축하기 위해 페이스북에서 만든
   Javascript 라이브러리

   각각의 독립적인 컴포넌트(하나의 기능을 하는 코드 덩어리) 단위들을 서로
   조립해서 만드는 것

   JSX 문법
      React에서 사용하는 문법
      새로 배울 필요는 없는 문법
   
   라이브러리 (도서관 = 책들의 집합)
   - 모든 코딩을 직접 하기에는 무리가 있고 비효율적
   - 따라서 짜놓은 코드를 가져다가 사용
   - 도구

---------------------------------------------------------

* React의 핵심 컨셉
   - re-render와 components

   * components
   - 한 가지의 기능을 수행하는 UI 단위
   - 컴포넌트는 DOM TREE처럼 Virtual Dom Tree라는 가상의 돔트리
      형식으로 만들어짐

---------------------------------------------------------

* Virtual Dom Tree
   - React가 가지고 있는 가상 돔 트리, 진짜 돔 트리의 복사본
   
---------------------------------------------------------

* re-render
   - 리액트는 쪼개진 컴포넌트를 사용자 화면에 구성하는 render 함수를 사용
   - 업데이트 이전의 가상 돔트리와 업데이트 이후 가상 돔 트리 상태를 비교
      업데이트 된 내용이 있다면 그 때 Dom Tree를 업데이트 하고 render 함수를
      다시 호출하는 과정

---------------------------------------------------------

* React를 쓰는 이유
   - 복잡한 코드를 편리하게 짤 수 있다
   - 유지보수가 편해진다 aos(문제가 있는 컴포넌트를 빠르게 찾아낼 수 있음)
   - 코드의 가독성이 높다, UI의 재사용성이 좋다
   - SPA(Single Page Accountment)에 적합하다 (re-render)
   - React-native (모바일 어플리케이션 제작 언어) 과 확장성

   비슷한 라이브러리와 프레임워크
   - VueJS, AngularJS

   npm trends
   npm 시장 비교 사이트
   https://www.npmtrends.com/

---------------------------------------------------------

=> 결국 React는 복잡한 UI를 쉽게 제작하고 코드를 재사용하며 가독성을
   높이기 위해 리렌더링과 컴포넌트를 사용하는 Javascript 라이브러리다

---------------------------------------------------------

yarn, npm, npx
- 세 가지 모두 node 프로젝트에서 설치되는 패키지나 라이브러리들을 관리해주는 툴
- 리액트는 여러가지 라이브러리들을 빌려와 개발

npm
   - 노드의 기본 패키지 관리툴, 사용빈도가 가장 높음
   - 단, 리액트 프로젝트 생성 시 관련 라이브러리를 다운받아야 하는데,
      무겁기 대문에 npm을 활용해서 프로젝트를 만들진 않는다
   - npm install 패키지명 (라이브러리명)
   - npm i 패키지명(라이브러리명)

   - npm remove 패키지명
   - npm rm 패키지명

npx
   - npm과 달리 설치를 하지 않고 실행만 시켜주는 도구
   - 개발하는 입장이라면 npm과 npx의 차이를 느끼지 못함
   - 단, npx를 사용하면 리액트 프로젝트 생성 시 관련 라이브러리를
      다운하지 않아도 되기 때문에 리액트 프로젝트 생성 시에 주로 사용
   - npm 5.2 이상부터는 기본으로 설치되어 있음

yarn
   - 과거 npm보다 속도, 안정성 모두 뛰어나 이목을 끌었다가,
      현재는 npm이 따라잡다 못해 능가한 상태
   - 단, 보안성에 있어서만큼은 npm과 npx와 결이 다르다
   - npm이 가장 많이 쓰이기 때문에 yarn을 지원하지 않는 라이브러리들이 존재
   - 사용법은 npm i -g yarn
   - yarn add 패키지명(라이브러리명)

---------------------------------------------------------

터미널 명령어
cd
cd 경로 -> 해당 경로로 이동
cd.. -> 뒤로 가기

* 리액크 프로젝트 생성법
npx create-react-app 프로젝트명

warning이 뜬다면
npm install tar@6 -g

cd ex1(프로젝트명)
npm start

---------------------------------------------------------

create-react-app (CRA - react에서 제공하는 프로젝트 제작 패키지)
- 바벨, 웹팩을 설정하지 않아도 기본 패키지에 포함

---------------------------------------------------------

바벨, 웹팩