변수
  값을 재사용하기 위해서 사용
  값을 저장하는 저장공간

변수의 선언
  자료형 변수명;  //int double char String

초기화
  변수를 선언한 뒤 최초의 값을 넣어주는 행위
  변수명 = 값;

변수의 선언과 초기화를 동시에
  자료형 변수명 = 값;

변수의 해석
  변수가 선언되거나 대입연산자 왼쪽에서 사용되면 저장공간으로 해석하고
  나머지는 저장된 값으로 해석한다

변수명 생성 시 규칙
  1. 숫자로 시작할 순 없다		
	int 1num; (x) 
	int n1um; (o) 
	int num1; (o)
  2. 띄어쓰기는 불가능하다		
	int my age; (x) 
	int myage;  (o) 
	int my_age; (o) 팟홀표기법
	int myAge;  (o) 카멜표기법
  3. 특수문자 사용이 불가능하다
	int @#$%; (x)

권고사항
  1. 웬만하면 의미있는 단어를 사용하자
    int a;
    int age;
  2. 웬만하면 소문자로 시작하자

입력 메소드
  Scanner 클래스 안에 메소드가 만들어져 있다
    next()		//사용자가 콘솔창에 입력한 값을 String타입으로 받아온다(띄어쓰기 구분)
    nextLine()	//사용자가 입력한 값을 String 타입으로 받아온다(엔터로 구분)
    nextInt()	//사용자가 입력한 값을 int로 받아온다(띄어쓰기로 구분)
    nextDouble()	//사용자가 입력한 값을 double로 받아온다(띄어쓰기로 구분)

next(), nextInt(), nextDouble() 을 사용하고 나면
     버퍼에 엔터 값이 남아 있다. 따라서 그 다음에 nextLine()을 사용하면
    입력을 받지 않고, 버퍼에 남아있는 엔터값을 받아온다.
     따라서 next(0, nextInt(), nextDouble()을 사용하고 싶다면 그 이전에 nextLine()을 사용하여
    버퍼를 지워주어야 한다.

============================================================

연산자
    연산의 결과가 어떤 타입인지 파악하는 것이 중요하다

    산술연산자
        +
	String은 연산시 결과가 String이며 연결이 된다
	char는 int라고 생각한다 (ASCII code)
	String > double > int > char
        -
	String 연산 불가
	char는 int로 생각
        *
	String 연산 불가
	char는 int로 생각
        /
	String 연산 불가
	char는 int로 생각
	int / int -> int
	?? / 0   -> error
        %
	나머지 연산자
	10 % 3 -> 1
    관계연산자
    논리연산자
    삼항연산자











