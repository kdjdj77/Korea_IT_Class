flex (플렉시블 레이아웃)
   대부분의 웹사이트는 수직 구성
   레이아웃 구성 시 가장 많이 사용되는 요소들은 대부분 블록 개념이기 때문에
   수직 구성은 쉽게 할 수 있으나 수평 구성은 구현하기가 쉽지 않음

   과거에는 수평구성은 float, inline-block으로 구성
   현재 조금 더 쉽게 수평 구성을 하기 위하여 flex를 사용한다
   display:flex;

   1) flex-wrap
      플렉스 라인에 더 이상 여유가 없을 때 플렉스 요소의 위치를 다음 줄로 넘겨줄 지 여부
      nowrap         : 기본 설정, 일렬로 나옴
      wrap           : 다음 줄로 넘어감
      wrap-reverse   : 아래쪽이 아니라 위쪽으로 넘김
   
   2) justify-content
      플렉스 요소의 수평방향 정렬 방식 설정

      flex-start  : 기본 설정, 앞쪽부터
      flex-end    : 뒤쪽에서부터 배치
      center      : 가운데 배치

      space-between  : 요소들 사이에 여백
      space-arround  : 요소들 사이에 동일 여백을 두고 배치
      space-evely    : 요소들 주변에 일정한 여백들 두고 배치
   
   3)align-items
      플렉스 요소의 수직방향 정렬 방식을 설정

      stretch  : 기본 설정, 플렉스 요소의 높이가 컨테이너의 높이와 같게 변경된 뒤 이어서 수평 정렬
      flex-start  : 위쪽부터 배치
      flex-end    : 아래쪽부터 배치
      center      : 가운데 배치
      baseline    : 기준선에 배치

미디어 쿼리

   width, height, color, .. 속성과 같은 미디어 관련 표현식을 통해 스타일이 적용되는 범위를 조절
   컨텐츠를 별도로 변경하지 않아도 웹 페이지에 접속하고 있는 기기에 따라 알맞은 형태로 스타일을 조절

   장점 : UI 고급화, 유지관리와 업데이트
   단점 : 구현이 어렵다, 다운로드 속도가 느려진다

   @media 매체유형 and 조건 ... {
      적용할 스타일 코드
   }

   매체유형
      all      : 모든 매체
      screen   : 컴퓨터, 태블릿, 핸드폰, ...
      print    : 프린터 기기
      speech   : 스크린 리더

      모바일 : ~480px
      모바일 가로, 태블릿 : 480px ~ 767px
      태블릿 가로 : 768px ~ 1023px
      낮은 해상도 PC, 태블릿 가로 : ~1024px
      이 이후는 그냥 PC : 1024px ~ 

      테이블 가로 : 768px ~ 1023px
      모바일 가로 : ~ 768px
      이 이후는 그냥 PC : 1024px ~ 

상대 크기 em / rem

   em 단위는 상위 요소(부모) 크기의 몇 배인지 나타내는 크기 (1.5em : 상위 요소의 1.5배)
   rem 단위는 문서의 최상의 요소(태그), 즉 html 요소 크기의 몇 배인지를 나타내는 크기 
   (1.5rem = html 요소의 1.5배 = 16px * 1.5)

=====================================================================

per, relative
transform
animation
간단한 페이지 제작