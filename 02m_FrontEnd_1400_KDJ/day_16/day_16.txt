------------------------------------------------------

연산자(Operator)
기능이 있는 특수문자 또는 단어
함수, 키워드들은 연산자가 아니다 (알고만)


산술 연산자
    +, -, *, /
    %, **

    a%b : 나머지 연산자 (a를 b로 나눈 나머지 값)
    a**b : 제곱연산자 (a의 b제곱)    
    ex)
    10%3 : 1
---------------------------------------------------------

비트 연산 (2진법)
    1 bit: 컴퓨터 용량의 최소단위
    1 byte: 8bit / 메모리의 최소 단위, 데이터의 최소 단위

    (1024배씩 1KB === 1024Byte, 1MB === 1024KB, ....)
    KB, MB, GB, TB, PB

---------------------------------------------------------

조건식
    조건을 제시하는 식
    결과가 참 또는 거짓 둘 중 하나로 나오는 식 (true/false)

    Boolean 타입
            참을 나타내는 true / 거짓을 나타내는 false 값
    Boolean() : 형변환

---------------------------------------------------------

관계연산자

    >, <    : 초과, 미만
    >=, <=  : 이상, 이하
    ==      : 같다 (타입(type)과 무관하게 값만 같으면 true)
    !=      : 다르다 (타입이(type)과 무관하게 값이 같지 않다면 true)
    ===     : 같다(타입과 값 모두 같으면 true)
    !==     : 다르다(타입가 값 중 하나만 달라도 true)

---------------------------------------------------------

논리연산자

    조건식들 간의 관계를 설정해주는 연산자
    (A와 B는 조건식)
    A && B : A와 B가 모두 true여야만 true 아니면 false (and)
    A || B : 둘중 하나라도 true 값이라면 true   (or)

---------------------------------------------------------

단항 연산자

    !A  : A가 true라면 그의 반대인 false를 false라면 true를 (not 반대)

---------------------------------------------------------

제어문
    프로그램 내에서 주어신 조건식의 결과에 따라 명령을 수행하도록 제어하는 문장

    조건문
        if ~ else if ~ else (if문)
        switch ~ case ~ default (switch/case 문)

    반복문
        while문
        for문

----------------------------------------------------------

조건문
    조건에 따라 경우의 수를 나눌 때
    프로그램의 흐름을 여러갈래로 나눌 떄 (사용자에게 선택지를 준다)
    특정 상태를 물어볼 때 (해당 변수에 데이터 값이 있니?, 체크박스는 체크했니?, alert창이 있니?)

if문(만약에~)
    조건식을 검사합니다. true일 경우에 if문 안에 있는 내용을 수행하고
    만약 해당 조건이 true가 아니라면 else if 혹은 else 안에 있는 내용을 수행한다

    ex)

    -- 만약에 조건식1 true니?
    if(조건식1){
        조건식1의 연산 결과가 true일 때 실행

    -- 조건식1이 true가 아니라면 만약에 조건식2는 true니?
    } else if (조건식2) {
        조건식2의 연산 결과가 ture일 때 실행

    -- 하.. 그래 이거라도 실행해라
    } else {
        조건식1,2의 연산결과가 false일 때 실행 (그 외 나머지)
    }

switch문
    경우의 수가 변수에 담긴 값의 따라 나뉠 떄 사용
    변수에 담긴 값에 알맞은 case의 안의 내용을 실행한다.

    하지만, 밑에 여러가지 case들이 더 있다면 이어서 case들이 호출되므로
    break;를 사용하여 해당 조건문을 탈출(종료) 시켜줘야한다

    switch(변수){
        case 값1:
            변수에 담긴 값이 값1이면 수행할 내용
            // break; (주석) -------------------> case 값1을 수행하고 case 값2도 수행
        case 값2:
            변수에 담긴 값이 값2이면 수행할 내용
            break;
        ...
        default:
            변수에 담긴 값이 위의 값들이 아닐 때 수행할 문장 (그 외 나머지)
    }

==========================================================================================

삼항연산자

    조건식 ? 값1 : 값2
    => 조건식이 true면 값1을 보여주고 아니면 값2를 보여주어라

    조건식 && 값
    => 조건식이 true이면 값을 보여주고 아니면 null을 보여주어라
        === 조건식 ? 값 : null

==========================================================================================

반복문
    특정한 코드나 행위를 반복해야할 때 사용

    조건에 의해 반복
    While문

    횟수에 의해 반복
    for문


while문

    while(조건식){
        조건식의 결과가 true일 동안 반복할 문장
    }

do ~ while문
    while문과 동일하는 무조건 한번은 실행합니다.

    do{
        조건식의 연산 결과가 true인 동안 반복할 문장  ======> 이 문장을 조건식이 t/f든 한번은 실행
    }while(조건식)

무한반복
    while(true){
        ...
        if(탈출조건식){
            ...
            break;
        }
    }

==========================================================================================

for문

    반복한 횟수가 특정된 경우에 사용
    무언가 값이 변하게 되는 반복이면 99% 확률로 for문일 가능성이 크다

    for(초기식; 조건식; 증감식){
        조건식이 참일동안 반복할 문장...
    }

    초기식: 변수, 내부에서 변수로 변하는 값을 표현이 가능
    조건식: 반복 수행될 조건식
    증감식: 매 반복마다 마지막으로 수행할 문장

    ex)
         ......부터   까지     1씩 더해라 (i++ => 1씩 더해가는 과정)
    for( let i=0;    i < 5;   i++){

        ...반복시 실행할 문장

    }    

    => i=0부터 5가 될 때까지 1씩 더하고 그 횟수만큼 반복해라

==========================================================================================

if (만약)
else if (그외 만약)
else (그 외)

switch (기준 변수)
case (변수 값에 따라 실행)
default (그 외)

break(탈출)

while (조건식 true 동안 실행)
for (횟수만큼 실행)