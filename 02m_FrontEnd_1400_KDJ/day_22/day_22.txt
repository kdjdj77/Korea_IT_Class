
setTimeout(콜백함수, 밀리초)
   : 넘겨준 함수를 해당 밀리초만큼 흐른 뒤 호출
clearTimeout(설정된 타임아웃 객체)
   : setTimeout에서 설정된 것을 취소

setInterval(콜백함수, 밀리초)
   : 넘겨준 함수를 해당 밀리초만큼 흐른 뒤 호출
clearInterval(설정된 인터벌 객체)
   : setInterval에서 설정된 것을 취소

-----------------------------------------------------------

콜백 함수(callback function)
매개변수로 함수를 전달받아서 함수 내부에서 그 함수를 실행하는 경우

ex)
const print = function()
{
   console.log("print")
};
setTimeout(print, 3000);
-------------같은 코드----------------
setTimeout(
   function
   {
      console.log("print");
   }, 3000)
)

---------------------------------------------------------------------

ES6 이후

promise
   비동기 통신 상황일 때 악명 높은 콜백지옥을 탈출했다는 점에서 높은 평가,
   대기 이행 실패 상태가 존재하며 각 pending, resolve, reject라고 칭함.

   promise를 전언하면 대기상태에서 실행은 되어있지만
   나중에 어떠한 조건을 만족했을 때 결과값을 받는 객체

async, await
   promise의 then catch의 반복으로 인한 코드가 길어지는 현상과 pending(대기)
   상태가 지속되는 현상을 해결하기 위해 등장