# 자바스크립트 출력

출력 : 개발자가 사용자에게 값을 표현

1. 대화상자 출력
   windows.alert()   :함수를 통해 알림창으로 출력
   windows.confirm() :함수를 통해 알림창을 확인 / 취소

2. 콘솔 출력 (개발자를 위한 출력)
   console.log()
   함수를 통해 콘솔창에 출력

---------------------------------------------------------------------------

내부자바스크립트
   <head>, <body> 안에 작성
   
   * 자바스크립트 적용이 되지 않을 때 (순서 중요)

외부자바스크립트
   <script src="경로/파일명.js"></script>

---------------------------------------------------------------------------

변수(variable)
   데이터(값)를 저장할 수 있는 메모리 공간

   X = 5;
   X = "가나다";
   [저장공간명][대입연산자][저장될 값]

   * 다른 언어
   int X = "정수";

   * JS
   let X:NUMBER = "어떠한 값";

---------------------------------------------------------------------------

변수의 선언
   (~ES5)  ---> var
   (ES6~)  ---> let, const

   var는 중복 선언을 허용하지 않지만 오류를 내지 않는다
      var x = 10;
      x = 12;
      var x = 52;

   let var를 쓰게 되면 선언하게 된다. (처음 사용)

   호이스팅
      선언 시에 강제로 최상단으로 올려서 선언

      var x;
      console.log(x); ..........undefine
      var x = 10;

      ES6 이후에 나온
      let과 const는 호이스팅이 일어나지 않는 것처럼 작동하게 만들어짐

      [변수명] = x;
      let x = 10;
      x = x + 2;  // 12
      x = 5;      // 5

   # 상수(constant) -> 변하지 않는 수
      한번 선언된 상수는 다시 재정의 할 수 없으며, 값도 재할당 할 수 없다

      const 상수명;
      상수명 = 값       // ERROR

      const 상수명 = 값 // OK
      상수명 = 값;      // ERROR

---------------------------------------------------------------------------

# 자료형 (Type)

   1. 숫자형 (nunber)
      다른 언어와 달리 정수와 실수를 따로 구분하지 않음
      모든 수를 하나로 표현
      ex) 100, 3.14

   2. 문자열형 (string)
      따옴표로 둘러싸인 문자들의 집합체, 문자의 나열을 뜻함
      " " / ' ' / ` `(백쿼트 - 변수를 가져다 쓸 수 있음 `${변수명}`)

   3. Undefined
      : 값이 정의되지 않았다
      : 타입이 정해지지 않았다

   4. null
      : 값이 정해지지 않았다, 할당되지 않았다, 변수를 초기화 한 경우
      //백엔드에서 데이터(null) => let info에 저장
      // -> null = let info


   5. 객체형 (Object)
      여러 속성, 여러 값을 하나의 변수에 저장할 수 있도록 해주는 타입
      키-값 구조로 이루어져 있다
      ex)
      const apple = {
         name  : "김사과";
         hobby : "잠자기";
      }

   6. 심볼형
      '유일하고 변경 불가능한' 기본 값을 만드는 타입
      객체 속성의 키 값으로 사용할 수 있다.

---------------------------------------------------------------------------

# 자바스크립트의 형변환

   1. 자동형변환
      :내가 따로 형변환을 하지 않아도 자바스크립트에서 알아서 암시적 혹은
      묵시적으로 형변환을 해준다

      숫자 + 문자열 => 문자열
      ex) 10 + "20" => "1020"

      단, - * / 를 했을 경우 숫자로 인식된다. 이 때 문자열은 반드시 숫자로
      이루어진 문자열이어야 하며 아닐 경우 NaN(Not a Number)가 나온다

   2. 강제형변환
      :자바스크립트는 자동으로 형변환을 지원하지만(자동형변환) 명시적으로 변환할
      필요가 있을 때 사용하는 함수

      Number()    : ()안의 문자를 -> 숫자로 변환
      String()    : ()안의 숫자나 불린 등(True/False)을 문자열로 변환
      Object()    : ()안의 모든 자료형 -> 객체형 변환
      parseInt()  : ()안의 문자열을 -> 정수로 변환
      parseFloat(): ()안의 문자열을 -> 실수로 변환

      ex)   let num = "5";
            parseInt(num) = 5

      *백엔드와의 통신에서의 강제 형변환
         id -> "string" -> error -> typeof -> "string" -> parseInt(id) -> typeof
         -> number

      *배열에서의 강제 형변환

         배열명[인덱스]
         인덱스 = 순서(숫자)

         let const = value;
         배열명[count]  //error
         typeof count   //string
         parseInt(count) -> typdof count //number

         배열명[count] //정상적인 값

      ===>
      숫자가 필요한 곳에 문자열의 값이 들어온 경우 형변환을 해 줘야 정상적인 작동이
      가능하기 때문에 해당 문자열을 강제로 숫자로 바꿔주는 강제 형변환을 사용한 것이다


